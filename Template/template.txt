//
//  Dialog.swift
//  GUI Input Experiment
//
//  Proof of concept for using NSWindow and SwiftUI components
//  to get user input through a graphical prompt and then use it
//  in the Alfred app - or on the command line.
//
//  Created by Patrick Sy on 30/04/2023.
//  Adapted by Fred Appelman on 16/05/2025.
//

import SwiftUI

struct Dialog: View {
  enum FocusField: Hashable {
	case field
  }
  @FocusState private var focusedField: FocusField?

  {declaration}

  var body: some View {
      VStack {
        {title}
        {instantiate}
        Buttons()
      }
      .padding()
      .frame(width: window_width)
  }
    
    @ViewBuilder
    func Title(icon: String = "aqi.medium", text: String) -> some View {
        HStack {
            Image(systemName: icon)
                .font(Font.largeTitle)
                .foregroundColor(.blue)
                .padding(.trailing, 10)
            Text(text).font(.title2)
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
    
    func flatten(_ set: Set<String>) -> String {
        return set.joined(separator: ",")
    }

    @ViewBuilder
    func Buttons() -> some View {
        HStack {
            Button(role: .cancel) {
                print("canceled", terminator: "")
                NSApplication.shared.terminate(nil)
            } label: {
                Text("Cancel")
            }
            .keyboardShortcut(.cancelAction)
            // ===---------------------------------------------------------------=== //
            // MARK: - Define here what should be returned
            // ===---------------------------------------------------------------=== //
            Button {
                {result}
                NSApplication.shared.terminate(nil)
            } label: {
                Text("Proceed")
            }
            .keyboardShortcut(.defaultAction)
        }
        .frame(maxWidth: .infinity, alignment: .trailing)
        .padding(.top, 10)
    }
    init() {
        for index in 1..<CommandLine.arguments.count {
            print(CommandLine.arguments[index])
        }
    }
}

struct ToggleView: View {
    @Binding var isOn: Bool
    var label: String

    var body: some View {
        HStack {
            Text(label)
                .font(.headline)
                .padding(.trailing, 10)
            HStack {
                Toggle("", isOn: $isOn)
                    .toggleStyle(SwitchToggleStyle())
                Spacer()
            }
            .frame(width: {field_width})
        }
        .frame(maxWidth: .infinity, alignment: .trailing)
    }
}

struct RadioSelection: View {
    @State var label: String
    @State var options: [String]
    @Binding var selection: Set<String>

    func toggleSelection(for option: String) {
        if selection.contains(option) {
            if let index = selection.firstIndex(of: option) {
                selection.remove(at: index)
            }
        } else {
            selection.insert(option)
        }
    }


    var body: some View {
        HStack {
            Text(label)
                .font(.headline)
                .padding(.trailing, 10)
            HStack(spacing: 5) {
                Spacer()
                ForEach(options, id: \.self) { option in
                    Button(action: {
                        toggleSelection(for: option)
                    }) {
                        HStack {
                            Image(systemName: selection.contains(option) ? "largecircle.fill.circle" : "circle")
                            Text(option)
                        }
                    }
                    .buttonStyle(PlainButtonStyle())
                    //.padding()
                    .cornerRadius(8)
                }
            }
            .frame(maxWidth: {field_width})
        }
        .frame(maxWidth: .infinity, alignment: .trailing)
    }
}

struct StringView: View {
    let text: String
    @Binding var input: String
    
    var body: some View {
        HStack {
            Text(text)
                .font(.headline)
                .padding(.trailing, 10)
            TextField(text, text: $input)
                .frame(maxWidth: {field_width})
        }
        .frame(maxWidth: .infinity, alignment: .trailing)
    }
}

struct PickerView: View {
    let title: String
    @Binding var selectedOption: String
    let options: [String]

    var body: some View {
        HStack {
            Text(title)
                .font(.headline)
                .padding(.trailing, 10)
            Picker("", selection: $selectedOption) {
                ForEach(options, id: \.self) { option in
                    Text(option).tag(option)
                }
            }
            .frame(width: {field_width})
            .pickerStyle(MenuPickerStyle())
        }
        .frame(maxWidth: .infinity, alignment: .trailing)
    }
}

class DialogAppDelegate: NSObject, NSApplicationDelegate {
    var window: NSWindow!
    func applicationDidFinishLaunching(_ aNotification: Notification) {
        let dialogView = Dialog()
        window = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 400, height: 350),
            styleMask: [.titled, .miniaturizable, .resizable, .fullSizeContentView],
            backing: .buffered,
            defer: false
        )
        window.center()
        window.setFrameAutosaveName("Main Window")
        window.contentView = NSHostingView(rootView: dialogView)
        window.makeKeyAndOrderFront(nil)
        NSApplication.shared.activate(ignoringOtherApps: true)
    }
}


let app = NSApplication.shared
let delegate = DialogAppDelegate()
app.delegate = delegate
app.setActivationPolicy(.regular) // so we can bring the window back when it goes to the background
for index in 1..<CommandLine.arguments.count {
    print(CommandLine.arguments[index])
}
app.run()



